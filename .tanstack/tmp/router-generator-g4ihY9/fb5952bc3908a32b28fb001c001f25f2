import { createFileRoute } from "@tanstack/react-router";
import { useState, useEffect, useRef } from "react";
import type { ChangeEvent, DragEvent } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { auth, db } from "@/config/firebase";
import {
  collection,
  query,
  where,
  getDocs,
  deleteDoc,
  doc,
  updateDoc,
  addDoc,
  serverTimestamp,
  getDoc,
} from "firebase/firestore";
import { put, del } from "@vercel/blob";
import { toast } from "react-hot-toast";
import { motion, AnimatePresence } from "framer-motion";
import {
  Pill,
  X,
  ArrowRight,
  Trash2,
  Edit,
  Check,
  Upload,
  CircleNotch,
  FileText,
  BadgeInfo,
  SquareArrowOutUpRight,
} from "lucide-react";

export const Route = createFileRoute("/dashboard/model")({
  component: Medication,
});

// Interface for Medication data
interface MedicationType {
  id: string;
  medicationName: string;
  description: string;
  comment?: string;
  userId: string;
  status: "pending" | "approved" | "rejected";
  submittedAt: any;
  rejectionReason?: string;
  file: {
    url: string;
    name: string;
    type: string;
    uploadedAt: string;
    size: number;
  };
}

// Interface for form validation errors
interface FormErrors {
  medicationName?: string;
  description?: string;
  file?: string;
}

// Interface for the edit form state
interface EditFormData {
  medicationName: string;
  description: string;
  comment: string;
}

// Main Medication component
function Medication() {
  const [currentUser, setCurrentUser] = useState<string | null>(null);
  const [medicationName, setMedicationName] = useState<string>("");
  const [description, setDescription] = useState<string>("");
  const [comment, setComment] = useState<string>("");
  const [file, setFile] = useState<File | null>(null);
  const [modalState, setModalState] = useState<{
    type: "details" | "viewAll" | null;
    medication?: MedicationType | null;
  }>({ type: null });
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [editForm, setEditForm] = useState<EditFormData>({
    medicationName: "",
    description: "",
    comment: "",
  });
  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [editFormErrors, setEditFormErrors] = useState<FormErrors>({});
  const [isDragging, setIsDragging] = useState<boolean>(false);
  const [isImageExpanded, setIsImageExpanded] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const queryClient = useQueryClient();

  // Set up authentication state listener
  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((user) => {
      setCurrentUser(user?.uid ?? null);
    });
    return () => unsubscribe();
  }, []);

  // Validate the form fields for both the main and edit forms
  const validateForm = (isEdit: boolean = false): boolean => {
    const errors: FormErrors = {};
    const data = isEdit ? editForm : { medicationName, description, file };

    if (!data.medicationName.trim()) {
      errors.medicationName = "Medication name is required";
    } else if (data.medicationName.trim().length < 2) {
      errors.medicationName = "Medication name must be at least 2 characters";
    }

    if (!data.description.trim()) {
      errors.description = "Description is required";
    } else if (data.description.trim().length < 10) {
      errors.description = "Description must be at least 10 characters";
    }

    // File validation is only for the new submission form
    if (!isEdit) {
      if (!file) {
        errors.file = "An image file is required";
      } else {
        if (file.size > 3 * 1024 * 1024) {
          errors.file = "Image size must be less than 3MB";
        } else if (!["image/jpeg", "image/png"].includes(file.type)) {
          errors.file = "Only JPEG or PNG images are allowed";
        }
      }
    }

    if (isEdit) {
      setEditFormErrors(errors);
    } else {
      setFormErrors(errors);
    }
    return Object.keys(errors).length === 0;
  };

  // Revalidate the edit form whenever its content changes
  useEffect(() => {
    if (isEditing) {
      validateForm(true);
    }
  }, [editForm, isEditing]);

  // Fetch medications from Firestore for the current user
  const { data: medications = [], isLoading: medsLoading } = useQuery<
    MedicationType[]
  >({
    queryKey: ["userMedications", currentUser],
    queryFn: async () => {
      if (!currentUser) return [];
      const medsRef = collection(db, "medications");
      const q = query(medsRef, where("userId", "==", currentUser));
      const snapshot = await getDocs(q);
      return snapshot.docs.map((doc) => ({
        id: doc.id,
        ...(doc.data() as Omit<MedicationType, "id">),
      }));
    },
    enabled: !!currentUser,
  });

  // Mutation to submit a new medication
  const { mutate: submitMedication, isPending: isSubmitting } = useMutation({
    mutationFn: async () => {
      if (!currentUser) throw new Error("Not authenticated");
      if (!validateForm()) {
        throw new Error("Please fix the form errors before submitting");
      }

      // Upload the image to Vercel Blob storage
      const filePath = `medications/${Date.now()}_${file!.name}`;
      let blob;
      try {
        blob = await put(filePath, file!, {
          access: "public",
          token: import.meta.env.VITE_BLOB_READ_WRITE_TOKEN,
        });
      } catch (error: any) {
        throw new Error(
          `Failed to upload image: ${error.message || "Unknown error"}`
        );
      }

      // Add the medication document to Firestore
      const medsRef = collection(db, "medications");
      await addDoc(medsRef, {
        medicationName: medicationName.trim(),
        description: description.trim(),
        comment: comment.trim() || "",
        userId: currentUser,
        status: "pending",
        submittedAt: serverTimestamp(),
        file: {
          url: blob.url,
          name: file!.name,
          type: file!.type,
          uploadedAt: new Date().toISOString(),
          size: file!.size,
        },
      });
    },
    onSuccess: () => {
      toast.success("Medication submitted successfully!");
      setMedicationName("");
      setDescription("");
      setComment("");
      setFile(null);
      setFormErrors({});
      if (fileInputRef.current) fileInputRef.current.value = "";
      queryClient.invalidateQueries({
        queryKey: ["userMedications", currentUser],
      });
    },
    onError: (error: any) => {
      toast.error(error.message || "Failed to submit medication");
    },
  });

  // Mutation to delete a medication and its associated image
  const { mutate: deleteMedication, isPending: isDeleting } = useMutation({
    mutationFn: async (medId: string) => {
      if (!currentUser) throw new Error("Not authenticated");
      const medRef = doc(db, "medications", medId);
      const medSnap = await getDoc(medRef);
      if (!medSnap.exists()) {
        throw new Error("Medication not found");
      }
      const fileUrl = medSnap.data()?.file?.url;
      await deleteDoc(medRef);
      if (fileUrl) {
        // Delete image from Vercel Blob storage
        del(fileUrl, {
          token: import.meta.env.VITE_BLOB_READ_WRITE_TOKEN,
        }).catch((error: any) => {
          console.error(
            `Failed to delete image: ${error.message || "Unknown error"}`
          );
        });
      }
    },
    onSuccess: () => {
      toast.success("Medication deleted successfully!");
      setModalState({ type: null });
      queryClient.invalidateQueries({
        queryKey: ["userMedications", currentUser],
      });
    },
    onError: (error: any) => {
      toast.error(error.message || "Failed to delete medication");
    },
  });

  // Mutation to update an existing medication
  const { mutate: updateMedication, isPending: isUpdating } = useMutation({
    mutationFn: async ({
      medId,
      data,
    }: {
      medId: string;
      data: Partial<MedicationType>;
    }) => {
      if (!currentUser) throw new Error("Not authenticated");
      if (!validateForm(true)) {
        throw new Error("Please fix the form errors before updating");
      }
      const medRef = doc(db, "medications", medId);
      const medSnap = await getDoc(medRef);
      if (!medSnap.exists()) {
        throw new Error("Medication not found");
      }
      await updateDoc(medRef, {
        ...data,
      });
    },
    onSuccess: () => {
      toast.success("Medication updated successfully!");
      setIsEditing(false);
      setEditForm({
        medicationName: "",
        description: "",
        comment: "",
      });
      setEditFormErrors({});
      queryClient.invalidateQueries({
        queryKey: ["userMedications", currentUser],
      });
    },
    onError: (error: any) => {
      toast.error(error.message || "Failed to update medication");
    },
  });

  // Handler to set up the edit form with current medication data
  const handleEditClick = (med: MedicationType) => {
    setEditForm({
      medicationName: med.medicationName,
      description: med.description,
      comment: med.comment ?? "",
    });
    setEditFormErrors({});
    setIsEditing(true);
  };

  // Handler for submitting the updated medication data
  const handleUpdateSubmit = () => {
    if (!modalState.medication?.id) return;
    if (!validateForm(true)) {
      toast.error("Please fix the form errors before updating");
      return;
    }
    updateMedication({
      medId: modalState.medication.id,
      data: {
        medicationName: editForm.medicationName.trim(),
        description: editForm.description.trim(),
        comment: editForm.comment.trim() || "",
        status: "pending", // Reset status to pending on update
      },
    });
    setIsEditing(false);
  };

  // Handler for file input change
  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setFile(selectedFile);
      setFormErrors((prev) => ({ ...prev, file: undefined }));
      validateForm();
    }
  };

  // Handlers for drag-and-drop functionality
  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const selectedFile = e.dataTransfer.files[0];
      setFile(selectedFile);
      setFormErrors((prev) => ({ ...prev, file: undefined }));
      validateForm();
    }
  };

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const removeFile = () => {
    setFile(null);
    if (fileInputRef.current) fileInputRef.current.value = "";
    setFormErrors((prev) => ({ ...prev, file: undefined }));
    validateForm();
  };

  const summaryLimit = 5;
  const summaryMeds = medications.slice(0, summaryLimit);
  const hasMore = medications.length > summaryLimit;

  return (
    <div className="bg-neutral-950 text-neutral-50 min-h-screen font-sans antialiased">
      <title>WiseBot - Medication Submission</title>
      <div className="max-w-7xl mx-auto px-4 py-12 md:py-20">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-lime-400 to-green-500">
            Medication Submission
          </h1>
          <p className="mt-4 text-neutral-400 text-lg max-w-2xl mx-auto">
            Easily submit new medications for review and track their status.
          </p>
        </div>

        {/* Submission Form */}
        <section className="bg-neutral-900 rounded-3xl shadow-2xl p-6 md:p-10 mb-16 border border-neutral-800 transition-shadow duration-300 hover:shadow-lime-500/10">
          <h2 className="text-2xl font-bold mb-8 text-center bg-clip-text text-transparent bg-gradient-to-r from-lime-400 to-green-500">
            Submit a New Medication
          </h2>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              submitMedication();
            }}
            className="space-y-6">
            <div>
              <label htmlFor="medicationName" className="block text-neutral-300 font-medium mb-2">
                Medication Name <span className="text-red-400">*</span>
              </label>
              <input
                id="medicationName"
                type="text"
                value={medicationName}
                onChange={(e) => setMedicationName(e.target.value)}
                onBlur={() => validateForm()}
                className="w-full bg-neutral-800/50 rounded-xl px-4 py-3 text-neutral-50 border border-neutral-700 focus:outline-none focus:ring-2 focus:ring-lime-500/50 transition-all duration-200"
                placeholder="e.g., Ibuprofen"
                disabled={isSubmitting}
              />
              <AnimatePresence>
                {formErrors.medicationName && (
                  <motion.p
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-red-400 text-sm mt-2 pl-2">
                    {formErrors.medicationName}
                  </motion.p>
                )}
              </AnimatePresence>
            </div>
            
            <div>
              <label htmlFor="description" className="block text-neutral-300 font-medium mb-2">
                Description <span className="text-red-400">*</span>
              </label>
              <textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                onBlur={() => validateForm()}
                rows={4}
                className="w-full bg-neutral-800/50 rounded-xl px-4 py-3 text-neutral-50 border border-neutral-700 resize-none focus:outline-none focus:ring-2 focus:ring-lime-500/50 transition-all duration-200"
                placeholder="Describe the medication (dosage, purpose, side effects, etc.)"
                disabled={isSubmitting}
              />
              <AnimatePresence>
                {formErrors.description && (
                  <motion.p
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-red-400 text-sm mt-2 pl-2">
                    {formErrors.description}
                  </motion.p>
                )}
              </AnimatePresence>
            </div>
            
            <div>
              <label htmlFor="file-upload" className="block text-neutral-300 font-medium mb-2">
                Medication Image <span className="text-red-400">*</span>
                <span className="text-neutral-500 text-sm ml-2">(Max 3MB, JPEG/PNG)</span>
              </label>
              <div
                onDrop={(e) => !file && handleDrop(e)}
                onDragOver={(e) => !file && handleDragOver(e)}
                onDragLeave={() => !file && handleDragLeave()}
                className={`relative w-full rounded-2xl border-2 border-dashed p-6 text-center cursor-pointer transition-all duration-200
                  ${file ? "border-neutral-700 bg-neutral-800/30 opacity-60 pointer-events-none" :
                    isDragging ? "border-lime-500 bg-lime-500/10" : "border-neutral-700 bg-neutral-800 hover:border-lime-500"
                  }`}
              >
                <input
                  id="file-upload"
                  ref={fileInputRef}
                  type="file"
                  accept="image/jpeg,image/png"
                  onChange={handleFileChange}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  disabled={isSubmitting || !!file}
                />
                <div className="flex flex-col items-center justify-center">
                  <Upload className={`h-8 w-8 mb-2 ${file ? "text-neutral-500" : isDragging ? "text-lime-400" : "text-neutral-400"}`} />
                  <p className="text-neutral-300 font-semibold">
                    {file ? "Image selected" : isDragging ? "Drop your image here" : "Drag & drop or click to upload"}
                  </p>
                  <p className="text-neutral-500 text-sm mt-1">
                    {file ? file.name : "JPEG or PNG (max 3MB)"}
                  </p>
                </div>
              </div>
              {file && (
                <div className="mt-4 flex items-center justify-between p-3 bg-neutral-800 rounded-xl border border-neutral-700">
                  <div className="flex items-center gap-4">
                    <img
                      src={URL.createObjectURL(file)}
                      alt="File preview"
                      className="w-16 h-16 object-cover rounded-lg border border-neutral-700 cursor-pointer"
                      onClick={() => setIsImageExpanded(true)}
                    />
                    <div className="flex-1 min-w-0">
                      <p className="text-neutral-300 font-semibold truncate">{file.name}</p>
                      <p className="text-neutral-500 text-sm">{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                    </div>
                  </div>
                  <button
                    type="button"
                    onClick={removeFile}
                    className="text-red-400 hover:text-red-300 p-2 rounded-full hover:bg-neutral-700 transition-colors"
                    aria-label="Remove file">
                    <X size={20} />
                  </button>
                </div>
              )}
              <AnimatePresence>
                {formErrors.file && (
                  <motion.p
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="text-red-400 text-sm mt-2 pl-2">
                    {formErrors.file}
                  </motion.p>
                )}
              </AnimatePresence>
            </div>

            <div>
              <label htmlFor="comment" className="block text-neutral-300 font-medium mb-2">
                Comment (optional)
              </label>
              <textarea
                id="comment"
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                rows={2}
                className="w-full bg-neutral-800/50 rounded-xl px-4 py-3 text-neutral-50 border border-neutral-700 resize-none focus:outline-none focus:ring-2 focus:ring-lime-500/50 transition-all duration-200"
                placeholder="Add any additional notes"
                disabled={isSubmitting}
              />
            </div>

            <button
              type="submit"
              disabled={isSubmitting || Object.keys(formErrors).length > 0}
              className={`w-full py-3 px-6 rounded-xl font-bold text-lg text-neutral-900 transition-all duration-300
                ${isSubmitting || Object.keys(formErrors).length > 0 ? "bg-neutral-600 cursor-not-allowed" : "bg-gradient-to-r from-lime-400 to-green-500 hover:scale-105 hover:shadow-lg"}`}>
              {isSubmitting ? (
                <span className="flex items-center justify-center gap-3">
                  <CircleNotch className="animate-spin h-5 w-5" />
                  Submitting...
                </span>
              ) : (
                "Submit Medication"
              )}
            </button>
          </form>
        </section>

        {/* Submitted Medications Section */}
        <section className="mt-16">
          <h2 className="text-3xl font-bold mb-8 text-center md:text-left bg-clip-text text-transparent bg-gradient-to-r from-lime-400 to-green-500">
            Your Submitted Medications
          </h2>

          {medsLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="h-40 bg-neutral-800 rounded-2xl animate-pulse"></div>
              ))}
            </div>
          ) : medications.length === 0 ? (
            <div className="flex flex-col items-center justify-center text-center py-20 bg-neutral-900 rounded-2xl border border-neutral-800">
              <Pill className="text-6xl mb-4 text-neutral-700" />
              <p className="text-xl font-medium text-neutral-400">
                You haven't submitted any medications yet.
              </p>
              <p className="text-sm mt-2 text-neutral-500">
                Use the form above to get started.
              </p>
            </div>
          ) : (
            <>
              {/* Desktop View */}
              <div className="hidden sm:block overflow-hidden rounded-2xl border border-neutral-800 bg-neutral-900 shadow-xl">
                <table className="min-w-full text-neutral-300 text-sm">
                  <thead className="bg-neutral-800/80">
                    <tr>
                      <th className="px-6 py-4 font-semibold w-1/5 text-left">Medication</th>
                      <th className="px-6 py-4 font-semibold w-2/5 text-left">Description</th>
                      <th className="px-6 py-4 font-semibold w-1/6 text-center">Status</th>
                      <th className="px-6 py-4 font-semibold w-1/5 text-left">Submitted At</th>
                      <th className="px-6 py-4 font-semibold w-1/6 text-center">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <AnimatePresence>
                      {summaryMeds.map((med) => (
                        <motion.tr
                          key={med.id}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          transition={{ duration: 0.25 }}
                          className="border-b border-neutral-800 last:border-b-0 hover:bg-neutral-800/50 cursor-pointer transition-colors duration-200"
                          onClick={() => setModalState({ type: "details", medication: med })}>
                          <td className="px-6 py-4 font-medium max-w-[150px] truncate" title={med.medicationName}>
                            {med.medicationName}
                          </td>
                          <td className="px-6 py-4 max-w-[250px] truncate text-neutral-400" title={med.description}>
                            {med.description}
                          </td>
                          <td className="px-6 py-4 text-center">
                            <StatusBadge status={med.status} />
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-neutral-500">
                            {med.submittedAt?.toDate?.().toLocaleString() ?? "-"}
                          </td>
                          <td className="px-6 py-4 text-center">
                            <button className="text-lime-400 hover:text-lime-300 flex items-center gap-1 mx-auto transition-colors duration-200">
                              <BadgeInfo size={18} />
                            </button>
                          </td>
                        </motion.tr>
                      ))}
                    </AnimatePresence>
                  </tbody>
                </table>
              </div>

              {/* Mobile View */}
              <div className="sm:hidden space-y-4">
                <AnimatePresence>
                  {summaryMeds.map((med) => (
                    <motion.div
                      key={med.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.25 }}
                      className="bg-neutral-900 p-5 rounded-2xl border border-neutral-800 shadow-md transition-transform duration-200 hover:scale-[1.02] cursor-pointer"
                      onClick={() => setModalState({ type: "details", medication: med })}>
                      <div className="flex justify-between items-start">
                        <h3 className="text-lg font-bold text-neutral-200 max-w-[65%] truncate" title={med.medicationName}>
                          {med.medicationName}
                        </h3>
                        <StatusBadge status={med.status} />
                      </div>
                      <p className="text-neutral-400 text-sm mt-2 line-clamp-2">{med.description}</p>
                      <div className="flex justify-between items-center mt-4 text-neutral-500 text-xs">
                        <span>Submitted: {med.submittedAt?.toDate?.().toLocaleDateString() ?? "-"}</span>
                        <span className="flex items-center gap-1 text-lime-400 text-sm font-semibold">
                          Details <ArrowRight size={14} />
                        </span>
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>

              {hasMore && (
                <button
                  onClick={() => setModalState({ type: "viewAll" })}
                  className="mt-8 flex items-center gap-2 mx-auto sm:mx-0 text-lime-400 font-semibold text-lg px-6 py-3 rounded-full border-2 border-lime-400 transition-all duration-300 hover:bg-lime-400 hover:text-neutral-950 hover:shadow-lg">
                  View All Medications ({medications.length}) <SquareArrowOutUpRight size={20} />
                </button>
              )}
            </>
          )}
        </section>

        {/* Modal for Details and View All */}
        {modalState.type && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-6 font-sans"
            onClick={() => {
              setModalState({ type: null });
              setIsEditing(false);
              setEditFormErrors({});
              setIsImageExpanded(false);
            }}>
            <motion.div
              initial={{ scale: 0.9, opacity: 0, y: 20 }}
              animate={{ scale: 1, opacity: 1, y: 0 }}
              exit={{ scale: 0.9, opacity: 0, y: 20 }}
              transition={{ type: "spring", stiffness: 200, damping: 25 }}
              className="bg-neutral-900 rounded-3xl shadow-2xl p-6 md:p-10 max-w-full sm:max-w-4xl w-full border border-neutral-800 relative max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}>
              
              <button
                className="absolute top-4 right-4 text-neutral-400 hover:text-lime-400 transition-colors"
                onClick={() => {
                  setModalState({ type: null });
                  setIsEditing(false);
                  setEditFormErrors({});
                  setIsImageExpanded(false);
                }}
                aria-label="Close modal">
                <X size={30} />
              </button>

              {/* Details Modal Content */}
              {modalState.type === "details" && modalState.medication && (
                <>
                  <h3 className="text-2xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-lime-400 to-green-500">
                    {isEditing ? "Edit Medication" : "Medication Details"}
                  </h3>
                  
                  {isEditing ? (
                    <div className="space-y-6">
                      <div>
                        <label htmlFor="edit-name" className="block text-neutral-300 font-medium mb-2">
                          Medication Name <span className="text-red-400">*</span>
                        </label>
                        <input
                          id="edit-name"
                          type="text"
                          value={editForm.medicationName}
                          onChange={(e) => setEditForm({ ...editForm, medicationName: e.target.value })}
                          onBlur={() => validateForm(true)}
                          className="w-full bg-neutral-800/50 rounded-xl px-4 py-3 text-neutral-50 border border-neutral-700 focus:outline-none focus:ring-2 focus:ring-lime-500/50 transition-all duration-200"
                          disabled={isUpdating}
                        />
                        <AnimatePresence>
                          {editFormErrors.medicationName && (
                            <motion.p
                              initial={{ opacity: 0, height: 0 }}
                              animate={{ opacity: 1, height: "auto" }}
                              exit={{ opacity: 0, height: 0 }}
                              className="text-red-400 text-sm mt-2 pl-2">
                              {editFormErrors.medicationName}
                            </motion.p>
                          )}
                        </AnimatePresence>
                      </div>

                      <div>
                        <label htmlFor="edit-desc" className="block text-neutral-300 font-medium mb-2">
                          Description <span className="text-red-400">*</span>
                        </label>
                        <textarea
                          id="edit-desc"
                          value={editForm.description}
                          onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}
                          onBlur={() => validateForm(true)}
                          rows={4}
                          className="w-full bg-neutral-800/50 rounded-xl px-4 py-3 text-neutral-50 border border-neutral-700 resize-none focus:outline-none focus:ring-2 focus:ring-lime-500/50 transition-all duration-200"
                          disabled={isUpdating}
                        />
                        <AnimatePresence>
                          {editFormErrors.description && (
                            <motion.p
                              initial={{ opacity: 0, height: 0 }}
                              animate={{ opacity: 1, height: "auto" }}
                              exit={{ opacity: 0, height: 0 }}
                              className="text-red-400 text-sm mt-2 pl-2">
                              {editFormErrors.description}
                            </motion.p>
                          )}
                        </AnimatePresence>
                      </div>
                      
                      <div className="flex-grow">
                        <label htmlFor="edit-comment" className="block text-neutral-300 font-medium mb-2">
                          Comment (optional)
                        </label>
                        <textarea
                          id="edit-comment"
                          value={editForm.comment}
                          onChange={(e) => setEditForm({ ...editForm, comment: e.target.value })}
                          rows={2}
                          className="w-full bg-neutral-800/50 rounded-xl px-4 py-3 text-neutral-50 border border-neutral-700 resize-none focus:outline-none focus:ring-2 focus:ring-lime-500/50 transition-all duration-200"
                          placeholder="Add any additional notes"
                          disabled={isUpdating}
                        />
                      </div>

                      <div className="flex justify-end gap-3 mt-8">
                        <button
                          onClick={() => setIsEditing(false)}
                          className="px-6 py-3 rounded-xl text-neutral-300 border border-neutral-700 bg-neutral-800 hover:bg-neutral-700 transition-colors"
                          disabled={isUpdating}>
                          Cancel
                        </button>
                        <button
                          onClick={handleUpdateSubmit}
                          disabled={isUpdating || Object.keys(editFormErrors).length > 0}
                          className={`px-6 py-3 rounded-xl font-bold text-lg text-neutral-900 transition-all duration-300
                            ${isUpdating || Object.keys(editFormErrors).length > 0 ? "bg-neutral-600 cursor-not-allowed" : "bg-gradient-to-r from-lime-400 to-green-500 hover:scale-105 hover:shadow-lg"}`}>
                          {isUpdating ? (
                            <span className="flex items-center gap-2">
                              <CircleNotch className="animate-spin h-5 w-5" /> Updating...
                            </span>
                          ) : (
                            "Update Medication"
                          )}
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-6 text-neutral-300">
                      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                        <h4 className="text-xl font-bold mb-2 sm:mb-0">{modalState.medication.medicationName}</h4>
                        <StatusBadge status={modalState.medication.status} />
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                          <p className="font-semibold text-neutral-400">Submitted At:</p>
                          <p>{modalState.medication.submittedAt?.toDate?.().toLocaleString() ?? "-"}</p>
                        </div>
                        <div>
                          <p className="font-semibold text-neutral-400">Status:</p>
                          <p className="flex items-center gap-2">
                            <StatusBadge status={modalState.medication.status} />
                          </p>
                        </div>
                      </div>
                      <div>
                        <p className="font-semibold text-neutral-400 mb-1">Description:</p>
                        <p className="bg-neutral-800/50 p-4 rounded-xl whitespace-pre-line text-sm border border-neutral-700">{modalState.medication.description}</p>
                      </div>
                      {modalState.medication.comment && (
                        <div>
                          <p className="font-semibold text-neutral-400 mb-1">Comment:</p>
                          <p className="bg-neutral-800/50 p-4 rounded-xl whitespace-pre-line text-sm border border-neutral-700">{modalState.medication.comment}</p>
                        </div>
                      )}
                      <div>
                        <p className="font-semibold text-neutral-400 mb-1">Uploaded Image:</p>
                        {modalState.medication.file ? (
                          <div className="flex flex-col items-start gap-4">
                            <img
                              src={modalState.medication.file.url}
                              alt={modalState.medication.file.name}
                              className="w-32 h-32 object-cover rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer border border-neutral-700"
                              onClick={() => setIsImageExpanded(true)}
                            />
                            <a href={modalState.medication.file.url} target="_blank" rel="noopener noreferrer"
                              className="flex items-center gap-2 text-lime-400 hover:underline transition-colors text-sm">
                              <SquareArrowOutUpRight size={16} /> View Image
                            </a>
                          </div>
                        ) : (
                          <p className="text-neutral-500 italic">No image uploaded.</p>
                        )}
                      </div>

                      {modalState.medication.status === "rejected" && modalState.medication.rejectionReason && (
                        <div className="bg-red-900/20 p-4 rounded-xl border border-red-900/50">
                          <p className="font-semibold text-red-300">Rejection Reason:</p>
                          <p className="text-red-200 whitespace-pre-line mt-1">{modalState.medication.rejectionReason}</p>
                        </div>
                      )}

                      <div className="mt-8 flex justify-end gap-3">
                        {(modalState.medication.status === "pending" || modalState.medication.status === "rejected") && (
                          <>
                            <button
                              onClick={() => modalState.medication && handleEditClick(modalState.medication)}
                              className="flex items-center gap-2 bg-lime-500/10 text-lime-400 border border-lime-500/20 py-2 px-4 rounded-xl transition-colors duration-200 hover:bg-lime-500/20">
                              <Edit size={18} /> Edit
                            </button>
                            <button
                              onClick={() => {
                                if (modalState.medication?.id) {
                                  deleteMedication(modalState.medication.id);
                                }
                              }}
                              disabled={isDeleting}
                              className={`flex items-center gap-2 bg-rose-500/10 text-rose-400 border border-rose-500/20 py-2 px-4 rounded-xl transition-colors duration-200 hover:bg-rose-500/20
                                ${isDeleting ? "opacity-60 cursor-not-allowed" : ""}`}>
                              {isDeleting ? (
                                <>
                                  <CircleNotch className="animate-spin h-5 w-5" /> Deleting...
                                </>
                              ) : (
                                <>
                                  <Trash2 size={18} /> Delete
                                </>
                              )}
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  )}
                </>
              )}

              {/* View All Modal Content */}
              {modalState.type === "viewAll" && (
                <>
                  <h3 className="text-2xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-lime-400 to-green-500">
                    All Submitted Medications
                  </h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full text-sm text-neutral-300">
                      <thead>
                        <tr className="text-left bg-neutral-800/80 border-b border-neutral-700 font-bold">
                          <th className="px-4 py-3 w-1/4">Name</th>
                          <th className="px-4 py-3 w-1/2 hidden md:table-cell">Description</th>
                          <th className="px-4 py-3 w-1/4 text-center">Status</th>
                          <th className="px-4 py-3 w-1/4 hidden lg:table-cell">Submitted At</th>
                        </tr>
                      </thead>
                      <tbody>
                        {medications.map((med) => (
                          <tr
                            key={med.id}
                            className="border-b border-neutral-800 last:border-b-0 hover:bg-neutral-800/50 cursor-pointer transition-colors duration-200"
                            onClick={() => {
                              setModalState({ type: "details", medication: med });
                            }}>
                            <td className="px-4 py-3 font-medium max-w-[150px] truncate" title={med.medicationName}>
                              {med.medicationName}
                            </td>
                            <td className="px-4 py-3 font-light max-w-[250px] truncate text-neutral-400 hidden md:table-cell" title={med.description}>
                              {med.description}
                            </td>
                            <td className="px-4 py-3 text-center">
                              <StatusBadge status={med.status} />
                            </td>
                            <td className="px-4 py-3 font-light text-neutral-500 hidden lg:table-cell whitespace-nowrap">
                              {med.submittedAt?.toDate?.().toLocaleDateString() ?? "-"}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </>
              )}
            </motion.div>
          </motion.div>
        )}

        {/* Full-screen Image Modal */}
        {isImageExpanded && modalState.medication?.file && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/90 flex items-center justify-center z-[60] p-6"
            onClick={() => setIsImageExpanded(false)}>
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              transition={{ type: "spring", stiffness: 100, damping: 15 }}
              className="relative max-w-full max-h-full"
              onClick={(e) => e.stopPropagation()}>
              <img
                src={modalState.medication.file.url}
                alt={modalState.medication.file.name}
                className="w-full h-auto object-contain max-w-[90vw] max-h-[90vh] rounded-lg shadow-2xl"
              />
              <button
                className="absolute top-4 right-4 text-white hover:text-lime-400 transition-colors"
                onClick={() => setIsImageExpanded(false)}
                aria-label="Close image">
                <X size={30} />
              </button>
            </motion.div>
          </motion.div>
        )}
      </div>
    </div>
  );
}

// Status badge component for visual flair
function StatusBadge({ status }: { status: MedicationType["status"] }) {
  const baseClasses = "px-3 py-1 rounded-full text-xs font-semibold whitespace-nowrap flex items-center gap-1";
  switch (status) {
    case "approved":
      return (
        <span className={`${baseClasses} bg-green-900/30 text-green-400`}>
          <Check size={14} /> Approved
        </span>
      );
    case "rejected":
      return (
        <span className={`${baseClasses} bg-red-900/30 text-red-400`}>
          <X size={14} /> Rejected
        </span>
      );
    case "pending":
    default:
      return (
        <span className={`${baseClasses} bg-yellow-900/30 text-yellow-400`}>
          <FileText size={14} /> Pending Review
        </span>
      );
  }
}

export default Medication;
