import { createFileRoute } from "@tanstack/react-router";
import { useState } from "react";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  query,
  orderBy,
  updateDoc,
  Timestamp,
} from "firebase/firestore";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "react-hot-toast";
import { motion, AnimatePresence } from "framer-motion";
import { Filter, Search, X, CheckCircle, XCircle } from "lucide-react";
import { db } from "@/config/firebase";

interface UserData {
  uid: string;
  email: string;
  gender: string;
  dob: Timestamp | null;
  name: string;
  surname: string;
  joinedAt: Timestamp;
  isAdmin: boolean;
  photoURL?: string;
}

interface MedicationData {
  id?: string;
  userId: string;
  medicationName: string;
  description: string;
  comment?: string;
  status: "pending" | "approved" | "rejected";
  submittedAt: Timestamp;
  reviewedAt?: Timestamp;
  reviewedBy?: string;
  rejectionReason?: string;
}

export const Route = createFileRoute("/dashboard/admin/medication")({
  component: AdminMedicationsTab,
});

interface AdminMedicationsTabProps {
  user: any;
  isAdmin: boolean;
}

const AdminMedicationsTab: React.FC<AdminMedicationsTabProps> = ({
  user,
  isAdmin,
}) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState<
    "all" | "pending" | "approved" | "rejected"
  >("all");
  const [selectedMedication, setSelectedMedication] =
    useState<MedicationData | null>(null);
  const [rejectionReason, setRejectionReason] = useState("");
  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);
  const queryClient = useQueryClient();

  const { data: allMedications, isLoading: isLoadingMedications } = useQuery<
    MedicationData[]
  >({
    queryKey: ["allMedications"],
    queryFn: async () => {
      if (!user || !isAdmin) return [];
      const medicationsRef = collection(db, "medications");
      const q = query(medicationsRef, orderBy("submittedAt", "desc"));
      const snapshot = await getDocs(q);
      return snapshot.docs.map(
        (doc) =>
          (({
            id: doc.id,
            ...doc.data()
          }) as MedicationData)
      );
    },
    enabled: !!user && isAdmin,
  });

  const { data: medicationUsers } = useQuery<Record<string, UserData>>({
    queryKey: ["medicationUsers", allMedications],
    queryFn: async () => {
      if (!allMedications || !user || !isAdmin) return {};

      const userIds = [...new Set(allMedications.map((m) => m.userId))];
      const userData: Record<string, UserData> = {};

      await Promise.all(
        userIds.map(async (userId) => {
          const userDoc = await getDoc(doc(db, "users", userId));
          if (userDoc.exists()) {
            userData[userId] = userDoc.data() as UserData;
          }
        })
      );

      return userData;
    },
    enabled: !!allMedications && allMedications.length > 0 && !!user && isAdmin,
  });

  const filteredMedications = allMedications?.filter((m) => {
    const matchesSearch =
      m.medicationName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      m.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (medicationUsers?.[m.userId]?.name || "")
        .toLowerCase()
        .includes(searchTerm.toLowerCase()) ||
      (medicationUsers?.[m.userId]?.surname || "")
        .toLowerCase()
        .includes(searchTerm.toLowerCase());

    const matchesStatus = statusFilter === "all" || m.status === statusFilter;

    return matchesSearch && matchesStatus;
  });

  const updateMedicationMutation = useMutation({
    mutationFn: async ({
      medicationId,
      status,
      rejectionReason,
    }: {
      medicationId: string;
      status: "approved" | "rejected";
      rejectionReason?: string;
    }) => {
      if (!user || !isAdmin) throw new Error("Unauthorized");
      if (!medicationId) throw new Error("Medication ID is required");

      const medicationRef = doc(db, "medications", medicationId);
      const updateData: Partial<MedicationData> = {
        status,
        reviewedAt: Timestamp.now(),
        reviewedBy: user.uid,
      };

      if (status === "rejected" && rejectionReason) {
        updateData.rejectionReason = rejectionReason;
      }

      await updateDoc(medicationRef, updateData);
    },
    onSuccess: () => {
      toast.success("Medication status updated successfully!");
      setIsReviewModalOpen(false);
      setSelectedMedication(null);
      setRejectionReason("");
      queryClient.invalidateQueries({ queryKey: ["allMedications"] });
    },
    onError: (error: any) => {
      toast.error(error.message || "Failed to update medication status");
    },
  });

  const handleReviewMedication = (medication: MedicationData) => {
    setSelectedMedication(medication);
    setRejectionReason("");
    setIsReviewModalOpen(true);
  };

  const handleApprove = () => {
    if (!selectedMedication?.id) return;
    updateMedicationMutation.mutate({
      medicationId: selectedMedication.id,
      status: "approved",
    });
  };

  const handleReject = () => {
    if (!selectedMedication?.id) return;
    if (!rejectionReason.trim()) {
      toast.error("Please provide a reason for rejection");
      return;
    }
    updateMedicationMutation.mutate({
      medicationId: selectedMedication.id,
      status: "rejected",
      rejectionReason,
    });
  };

  const getUserName = (userId: string) => {
    const user = medicationUsers?.[userId];
    return user ? `${user.name} ${user.surname}` : userId;
  };

  const formatDate = (timestamp: Timestamp) => {
    return timestamp.toDate().toLocaleDateString("en-ZA", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return (
          <span className="px-2 py-1 rounded-full text-xs font-medium bg-yellow-500/20 text-yellow-500 flex items-center w-fit">
            <Clock size={12} className="mr-1" /> Pending
          </span>
        );
      case "approved":
        return (
          <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-500/20 text-green-500 flex items-center w-fit">
            <CheckCircle size={12} className="mr-1" /> Approved
          </span>
        );
      case "rejected":
        return (
          <span className="px-2 py-1 rounded-full text-xs font-medium bg-red-500/20 text-red-500 flex items-center w-fit">
            <XCircle size={12} className="mr-1" /> Rejected
          </span>
        );
      default:
        return null;
    }
  };

  return (
    <motion.div
      className="bg-[#1E1E1E]/80 backdrop-blur-md rounded-xl border border-white/20 p-6 flex flex-col gap-4"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.3, duration: 0.5 }}>
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-white">
          Medication Management
        </h2>
      </div>
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search medications..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2.5 bg-[#252525] text-white placeholder-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 border border-[#333333]"
          />
        </div>
        <div className="flex items-center gap-2 bg-[#252525] px-3 py-2 rounded-lg border border-[#333333]">
          <Filter size={16} className="text-gray-400" />
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value as any)}
            className="bg-transparent text-white focus:outline-none">
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
          </select>
        </div>
      </div>
      <div className="overflow-x-auto">
        <table className="w-full text-sm text-left text-gray-200">
          <thead className="bg-[#252525] text-gray-300 uppercase text-xs">
            <tr>
              <th className="px-6 py-4 font-medium">Name</th>
              <th className="px-6 py-4 font-medium">Description</th>
              <th className="px-6 py-4 font-medium">Submitted By</th>
              <th className="px-6 py-4 font-medium">Submitted On</th>
              <th className="px-6 py-4 font-medium">Status</th>
              <th className="px-6 py-4 font-medium">Actions</th>
            </tr>
          </thead>
          <tbody>
            {isLoadingMedications ? (
              <tr>
                <td colSpan={6} className="px-6 py-8 text-center text-gray-400">
                  Loading medications...
                </td>
              </tr>
            ) : filteredMedications && filteredMedications.length > 0 ? (
              filteredMedications.map((medication) => (
                <tr
                  key={medication.id}
                  className="border-b border-[#333333] hover:bg-[#252525]">
                  <td className="px-6 py-4 font-medium text-white">
                    {medication.medicationName}
                  </td>
                  <td className="px-6 py-4 max-w-xs truncate">
                    {medication.description}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getUserName(medication.userId)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-gray-400">
                    {formatDate(medication.submittedAt)}
                  </td>
                  <td className="px-6 py-4">
                    {getStatusBadge(medication.status)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {medication.status === "pending" ? (
                      <motion.button
                        onClick={() => handleReviewMedication(medication)}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-md text-xs font-medium"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}>
                        Review
                      </motion.button>
                    ) : (
                      <motion.button
                        onClick={() => handleReviewMedication(medication)}
                        className="text-blue-500 hover:text-blue-400 px-3 py-1.5 text-xs font-medium"
                        whileHover={{ scale: 1.05 }}>
                        View Details
                      </motion.button>
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={6} className="px-6 py-8 text-center text-gray-400">
                  No medications found matching your criteria.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      <AnimatePresence>
        {isReviewModalOpen && selectedMedication && (
          <motion.div
            className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}>
            <motion.div
              className="bg-[#1E1E1E]/80 backdrop-blur-md rounded-xl border border-white/20 w-full max-w-2xl"
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}>
              <div className="p-6 border-b border-white/20 flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">
                  {selectedMedication.status === "pending"
                    ? "Review Medication"
                    : "Medication Details"}
                </h3>
                <button
                  onClick={() => setIsReviewModalOpen(false)}
                  className="text-gray-400 hover:text-white">
                  <X size={24} />
                </button>
              </div>
              <div className="p-6 space-y-4">
                <div>
                  <p className="text-sm text-gray-400">Medication Name</p>
                  <p className="text-white font-medium">
                    {selectedMedication.medicationName}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Description</p>
                  <p className="text-white">{selectedMedication.description}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Submitted By</p>
                  <p className="text-white">
                    {getUserName(selectedMedication.userId)}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Submitted On</p>
                  <p className="text-white">
                    {formatDate(selectedMedication.submittedAt)}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Status</p>
                  <div className="mt-1">
                    {getStatusBadge(selectedMedication.status)}
                  </div>
                </div>
                {selectedMedication.status !== "pending" && (
                  <>
                    {selectedMedication.reviewedAt && (
                      <div>
                        <p className="text-sm text-gray-400">Reviewed On</p>
                        <p className="text-white">
                          {formatDate(selectedMedication.reviewedAt)}
                        </p>
                      </div>
                    )}
                    {selectedMedication.rejectionReason && (
                      <div>
                        <p className="text-sm text-gray-400">
                          Rejection Reason
                        </p>
                        <p className="text-white">
                          {selectedMedication.rejectionReason}
                        </p>
                      </div>
                    )}
                  </>
                )}
                {selectedMedication.status === "pending" && (
                  <div>
                    <p className="text-sm text-gray-400 mb-2">
                      Rejection Reason (required if rejecting)
                    </p>
                    <textarea
                      value={rejectionReason}
                      onChange={(e) => setRejectionReason(e.target.value)}
                      placeholder="Provide a reason for rejection..."
                      className="w-full px-4 py-2.5 bg-[#252525] text-white placeholder-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 border border-[#333333] resize-none h-24"
                    />
                  </div>
                )}
              </div>
              <div className="p-6 border-t border-white/20 flex justify-end gap-3">
                <button
                  onClick={() => setIsReviewModalOpen(false)}
                  className="px-4 py-2 bg-[#333333] text-white rounded-lg hover:bg-[#444444]">
                  Close
                </button>
                {selectedMedication.status === "pending" && (
                  <>
                    <motion.button
                      onClick={handleReject}
                      disabled={updateMedicationMutation.isPending}
                      className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center gap-2 disabled:opacity-50"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}>
                      <XCircle size={18} /> Reject
                    </motion.button>
                    <motion.button
                      onClick={handleApprove}
                      disabled={updateMedicationMutation.isPending}
                      className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2 disabled:opacity-50"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}>
                      <CheckCircle size={18} /> Approve
                    </motion.button>
                  </>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default AdminMedicationsTab;
