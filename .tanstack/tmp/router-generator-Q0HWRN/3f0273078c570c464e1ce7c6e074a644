import { createFileRoute, Link } from "@tanstack/react-router";
import { useState, useEffect } from "react";
import { auth, db } from "@/config/firebase";
import { onAuthStateChanged } from "firebase/auth";
import type { User } from "firebase/auth";
import {
  doc,
  getDoc,
  collection,
  query,
  where,
  getDocs,
  Timestamp,
  orderBy,
  limit,
} from "firebase/firestore";
import { useQuery } from "@tanstack/react-query";
import { motion, useAnimation } from "framer-motion";
import { toast } from "react-hot-toast";
import {
  AlertCircle,
  Edit,
  Pill,
  MessageSquare,
  ClipboardList,
  CheckCircle,
  ShieldCheck,
  Calendar,
  Clock,
} from "lucide-react";
import EditProfileForm from "@/components/EditProfileForm";
import defaultMaleAvatar from "/male.jpg?url";
import defaultFemaleAvatar from "/female.jpg?url";

interface UserData {
  uid: string;
  email: string;
  gender: string;
  dob: Timestamp | null;
  name: string;
  surname: string;
  joinedAt: Timestamp;
  isAdmin: boolean;
  lastLogin: Timestamp | null;
  photoURL?: string;
}

interface Medication {
  id: string;
  name: string;
  dosage: string;
  createdAt: Timestamp;
}

interface Message {
  id: string;
  content: string;
  senderId: string;
  sentAt: Timestamp;
}

export const Route = createFileRoute("/dashboard/")({
  component: Profile,
});

function Profile() {
  const [user, setUser] = useState<User | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const navigate = Route.useNavigate();

  // Animation controls for badges
  const badgeControls = useAnimation();

  useEffect(() => {
    badgeControls.start({
      scale: [1, 1.05, 1],
      transition: { duration: 2, repeat: Infinity, ease: "easeInOut" },
    });
  }, [badgeControls]);

  // Firebase auth listener
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      if (!currentUser) {
        navigate({ to: "/auth" });
        toast.error("You must be logged in to view your profile.");
      } else {
        setUser(currentUser);
      }
    });
    return () => unsubscribe();
  }, [navigate]);

  // Fetch user data
  const { data: userData, isLoading: isLoadingUserData } = useQuery<UserData>({
    queryKey: ["userData", user?.uid],
    queryFn: async () => {
      if (!user) return {} as UserData;
      const userDoc = await getDoc(doc(db, "users", user.uid));
      return userDoc.exists() ? (userDoc.data() as UserData) : ({} as UserData);
    },
    enabled: !!user,
  });

  // Fetch medication count
  const { data: medicationCount = 0 } = useQuery<number>({
    queryKey: ["userMedicationCount", user?.uid],
    queryFn: async () => {
      if (!user) return 0;
      const q = query(
        collection(db, "medications"),
        where("userId", "==", user.uid)
      );
      const snapshot = await getDocs(q);
      return snapshot.size;
    },
    enabled: !!user,
  });

  // Fetch recent medications (limit 3)
  const { data: recentMedications = [] } = useQuery<Medication[]>({
    queryKey: ["recentMedications", user?.uid],
    queryFn: async () => {
      if (!user) return [];
      const q = query(
        collection(db, "medications"),
        where("userId", "==", user.uid),
        orderBy("createdAt", "desc"),
        limit(3)
      );
      const snapshot = await getDocs(q);
      return snapshot.docs.map(
        (doc) => (({
          id: doc.id,
          ...doc.data()
        }) as Medication)
      );
    },
    enabled: !!user,
  });

  // Fetch unread message count
  const { data: unreadMessageCount = 0 } = useQuery<number>({
    queryKey: ["userUnreadMessages", user?.uid],
    queryFn: async () => {
      if (!user) return 0;
      const q = query(
        collection(db, "messages"),
        where("recipientId", "==", user.uid),
        where("isRead", "==", false)
      );
      const snapshot = await getDocs(q);
      return snapshot.size;
    },
    enabled: !!user,
  });

  // Fetch recent messages (limit 3)
  const { data: recentMessages = [] } = useQuery<Message[]>({
    queryKey: ["recentMessages", user?.uid],
    queryFn: async () => {
      if (!user) return [];
      const q = query(
        collection(db, "messages"),
        where("recipientId", "==", user.uid),
        orderBy("sentAt", "desc"),
        limit(3)
      );
      const snapshot = await getDocs(q);
      return snapshot.docs.map(
        (doc) => (({
          id: doc.id,
          ...doc.data()
        }) as Message)
      );
    },
    enabled: !!user,
  });

  // Profile completeness check
  const isProfileIncomplete =
    userData &&
    (!userData.gender || userData.name === "Anonymous" || !userData.surname);

  // Avatar selection logic
  const avatarUrl =
    user?.photoURL ||
    userData?.photoURL ||
    (userData?.gender === "female" ? defaultFemaleAvatar : defaultMaleAvatar);

  if (isLoadingUserData) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="min-h-screen flex items-center justify-center bg-[#151312] text-white roboto-condensed-regular text-lg">
        Loading profile...
      </motion.div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
      className="w-full max-w-4xl mx-auto py-10 px-4 sm:px-6">
      {/* Profile Header */}
      <div className="bg-[#1A1A1A]/70 backdrop-blur-md rounded-2xl shadow-lg border border-white/10 p-8 mb-8">
        <div className="flex flex-col sm:flex-row items-center gap-6 sm:gap-8">
          <div className="relative">
            <img
              src={avatarUrl}
              alt="Profile"
              className="w-24 h-24 rounded-full object-cover border-2 border-white/20"
            />
            {userData?.isAdmin && (
              <motion.span
                animate={badgeControls}
                className="absolute -bottom-1 -right-1 bg-green-500/80 backdrop-blur-sm text-white p-2 rounded-full">
                <ShieldCheck size={16} />
              </motion.span>
            )}
          </div>
          <div className="flex-1 text-center sm:text-left">
            <h1 className="text-3xl roboto-condensed-bold">
              {userData?.name} {userData?.surname}
            </h1>
            <p className="text-base text-gray-400 roboto-condensed-light">
              {userData?.email}
            </p>
            <div className="flex items-center justify-center sm:justify-start gap-2 text-sm text-gray-400 mt-2">
              <Calendar size={16} />
              Joined{" "}
              {userData?.joinedAt?.toDate().toLocaleDateString("default", {
                month: "long",
                year: "numeric",
              })}
            </div>
            <div className="flex justify-center sm:justify-start gap-3 mt-3">
              <UnifiedBadge
                color={isProfileIncomplete ? "orange" : "green"}
                icon={
                  isProfileIncomplete ? (
                    <AlertCircle size={16} />
                  ) : (
                    <CheckCircle size={16} />
                  )
                }
                animate={badgeControls}>
                {isProfileIncomplete ? "Incomplete" : "Complete"}
              </UnifiedBadge>
              {userData?.isAdmin && (
                <UnifiedBadge
                  color="green"
                  icon={<ShieldCheck size={16} />}
                  animate={badgeControls}>
                  Admin
                </UnifiedBadge>
              )}
            </div>
          </div>
          <button
            onClick={() => setModalOpen(true)}
            className="bg-blue-500/80 backdrop-blur-sm text-white px-6 py-2.5 rounded-xl roboto-condensed-bold text-base hover:bg-blue-600/80 transition-all duration-200">
            <Edit size={16} className="inline-block mr-2" /> Edit
          </button>
        </div>
      </div>

      {/* Stats Section */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8">
        <Stat
          label="Medications"
          value={medicationCount}
          icon={<Pill size={24} className="text-red-400" />}
          badge={
            medicationCount === 0 ? (
              <UnifiedBadge
                color="red"
                icon={<Pill size={16} />}
                animate={badgeControls}>
                None
              </UnifiedBadge>
            ) : null
          }
        />
        <Stat
          label="Messages"
          value={unreadMessageCount}
          icon={<MessageSquare size={24} className="text-blue-400" />}
          badge={
            unreadMessageCount > 0 ? (
              <UnifiedBadge
                color="blue"
                icon={<MessageSquare size={16} />}
                animate={badgeControls}>
                {unreadMessageCount} Unread
              </UnifiedBadge>
            ) : null
          }
        />
        <Stat
          label="Profile"
          value={isProfileIncomplete ? "Incomplete" : "Complete"}
          icon={
            <CheckCircle
              size={24}
              className={
                isProfileIncomplete ? "text-orange-400" : "text-green-400"
              }
            />
          }
          badge={
            isProfileIncomplete ? (
              <UnifiedBadge
                color="orange"
                icon={<AlertCircle size={16} />}
                animate={badgeControls}>
                Incomplete
              </UnifiedBadge>
            ) : null
          }
        />
      </div>

      {/* Recent Activities */}
      <div className="bg-[#1A1A1A]/70 backdrop-blur-md rounded-2xl shadow-lg border border-white/10 p-8 mb-8">
        <h2 className="text-xl roboto-condensed-bold mb-4 flex items-center gap-2">
          <Clock size={18} /> Recent Activities
        </h2>
        <div className="space-y-4">
          {recentMedications.length === 0 && recentMessages.length === 0 ? (
            <p className="text-gray-400 roboto-condensed-light text-base">
              No recent activities.
            </p>
          ) : (
            <>
              {recentMedications.map((med) => (
                <ActivityItem
                  key={med.id}
                  icon={<Pill size={16} className="text-red-400" />}
                  title={med.name}
                  description={`Dosage: ${med.dosage} - Added on ${med.createdAt
                    .toDate()
                    .toLocaleDateString("default", {
                      month: "short",
                      day: "numeric",
                      year: "numeric",
                    })}`}
                  link="/dashboard/medication"
                />
              ))}
              {recentMessages.map((msg) => (
                <ActivityItem
                  key={msg.id}
                  icon={<MessageSquare size={16} className="text-blue-400" />}
                  title="New Message"
                  description={`${msg.content.substring(0, 50)}${msg.content.length > 50 ? "..." : ""} - Sent on ${msg.sentAt
                    .toDate()
                    .toLocaleDateString("default", {
                      month: "short",
                      day: "numeric",
                      year: "numeric",
                    })}`}
                  link="/dashboard/messages"
                />
              ))}
            </>
          )}
        </div>
      </div>

      {/* Task Center */}
      <div className="bg-[#1A1A1A]/70 backdrop-blur-md rounded-2xl shadow-lg border border-white/10 p-8">
        <h2 className="text-xl roboto-condensed-bold mb-4 flex items-center gap-2">
          <ClipboardList size={18} /> Tasks
        </h2>
        <div className="space-y-4">
          {isProfileIncomplete && (
            <TaskItem
              icon={<AlertCircle size={16} className="text-orange-400" />}
              text="Complete your profile to unlock all features"
              actionLabel="Update"
              actionOnClick={() => setModalOpen(true)}
              actionClass="bg-orange-400/80 hover:bg-orange-500/80 text-black"
            />
          )}
          {medicationCount === 0 && (
            <TaskItem
              icon={<Pill size={16} className="text-red-400" />}
              text="Add your first medication"
              actionLabel="Add"
              actionLink="/dashboard/medication"
              actionClass="bg-red-500/80 hover:bg-red-600/80 text-white"
            />
          )}
          {unreadMessageCount > 0 && (
            <TaskItem
              icon={<MessageSquare size={16} className="text-blue-400" />}
              text={`You have ${unreadMessageCount} unread message${unreadMessageCount > 1 ? "s" : ""}`}
              actionLabel="View"
              actionLink="/dashboard/messages"
              actionClass="bg-blue-500/80 hover:bg-blue-600/80 text-white"
            />
          )}
          {!isProfileIncomplete &&
            medicationCount > 0 &&
            unreadMessageCount === 0 && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex items-center gap-2 text-green-400 roboto-condensed-bold text-base">
                <CheckCircle size={16} /> All tasks complete!
              </motion.div>
            )}
        </div>
      </div>

      <EditProfileForm
        isShowing={modalOpen}
        hide={() => setModalOpen(false)}
        user={user}
      />
    </motion.div>
  );
}

function UnifiedBadge({
  color,
  icon,
  children,
  animate,
}: {
  color: "red" | "orange" | "blue" | "green";
  icon: React.ReactNode;
  children: React.ReactNode;
  animate?: any;
}) {
  const colors = {
    red: "bg-red-500/20 text-red-200 border-red-500/30",
    orange: "bg-orange-500/20 text-orange-200 border-orange-500/30",
    blue: "bg-blue-500/20 text-blue-200 border-blue-500/30",
    green: "bg-green-500/20 text-green-200 border-green-500/30",
  };
  return (
    <motion.span
      animate={animate}
      className={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full roboto-condensed-bold text-sm backdrop-blur-md border ${colors[color]}`}>
      {icon}
      {children}
    </motion.span>
  );
}

function Stat({
  label,
  value,
  icon,
  badge,
}: {
  label: string;
  value: string | number;
  icon: React.ReactNode;
  badge?: React.ReactNode;
}) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.4 }}
      className="flex items-center gap-4 p-4 rounded-lg">
      {icon}
      <div className="flex-1">
        <div className="text-xl roboto-condensed-bold">{value}</div>
        <div className="text-base text-gray-400 roboto-condensed-light">
          {label}
        </div>
      </div>
      {badge}
    </motion.div>
  );
}

function TaskItem({
  icon,
  text,
  actionLabel,
  actionOnClick,
  actionLink,
  actionClass,
}: {
  icon: React.ReactNode;
  text: string;
  actionLabel: string;
  actionOnClick?: () => void;
  actionLink?: string;
  actionClass: string;
}) {
  return (
    <motion.div
      initial={{ opacity: 0, x: -10 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.4 }}
      className="flex items-center justify-between py-3">
      <div className="flex items-center gap-4">
        {icon}
        <span className="roboto-condensed-regular text-base">{text}</span>
      </div>
      {actionLink ? (
        <Link
          to={actionLink}
          className={`${actionClass} px-6 py-2.5 rounded-xl text-base roboto-condensed-bold backdrop-blur-sm transition-all duration-200 min-w-[100px] text-center`}>
          {actionLabel}
        </Link>
      ) : (
        <button
          onClick={actionOnClick}
          className={`${actionClass} px-6 py-2.5 rounded-xl text-base roboto-condensed-bold backdrop-blur-sm transition-all duration-200 min-w-[100px] text-center`}>
          {actionLabel}
        </button>
      )}
    </motion.div>
  );
}

function ActivityItem({
  icon,
  title,
  description,
  link,
}: {
  icon: React.ReactNode;
  title: string;
  description: string;
  link: string;
}) {
  return (
    <motion.div
      initial={{ opacity: 0, x: -10 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.4 }}
      className="flex items-center justify-between py-3">
      <div className="flex items-center gap-4">
        {icon}
        <div>
          <div className="text-base roboto-condensed-bold">{title}</div>
          <div className="text-sm text-gray-400 roboto-condensed-light">
            {description}
          </div>
        </div>
      </div>
      <Link
        to={link}
        className="bg-blue-500/80 hover:bg-blue-600/80 text-white px-6 py-2.5 rounded-xl text-base roboto-condensed-bold backdrop-blur-sm transition-all duration-200 min-w-[100px] text-center">
        View
      </Link>
    </motion.div>
  );
}

export default Profile;
